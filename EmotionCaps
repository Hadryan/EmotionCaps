{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Experimental (2)","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"dKc24amxRr_6","colab_type":"text"},"source":["#Comment this if not running on Google Colaboratory"]},{"cell_type":"code","metadata":{"id":"gGvhcipDN6B3","colab_type":"code","outputId":"58195fb7-7aa5-4656-f759-df2b43130565","executionInfo":{"status":"ok","timestamp":1589627870951,"user_tz":-330,"elapsed":26590,"user":{"displayName":"krutarth bhatt","photoUrl":"","userId":"08759044503966658955"}},"colab":{"base_uri":"https://localhost:8080/","height":124}},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"XPcjbcdBR7NA","colab_type":"text"},"source":["#Importing Libraries"]},{"cell_type":"code","metadata":{"id":"dH0FK2IhKFs6","colab_type":"code","colab":{}},"source":["import cv2\n","import random\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F \n","from torch.utils.data import DataLoader, TensorDataset\n","from torchvision.transforms.functional import normalize\n","from torch.utils.tensorboard import SummaryWriter"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eI2SzZXTL3DU","colab_type":"code","outputId":"fb5f76f4-a74a-41ff-de9a-60d7ea204a1d","executionInfo":{"status":"ok","timestamp":1589627943260,"user_tz":-330,"elapsed":4969,"user":{"displayName":"krutarth bhatt","photoUrl":"","userId":"08759044503966658955"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["np.random.seed(0)\n","torch.manual_seed(0)"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<torch._C.Generator at 0x7f32de8ff710>"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"1fnpyeHLGsEi","colab_type":"text"},"source":["#Checking GPU existence"]},{"cell_type":"code","metadata":{"id":"eZa59DENWkoA","colab_type":"code","outputId":"428ce364-d25a-431d-8646-26ee42f3aef8","executionInfo":{"status":"ok","timestamp":1589627945324,"user_tz":-330,"elapsed":1032,"user":{"displayName":"krutarth bhatt","photoUrl":"","userId":"08759044503966658955"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","print(device)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["cuda:0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"MqMYAUgwMOeI","colab_type":"text"},"source":["#Data Loading (Change the Path to CSV accordingly)"]},{"cell_type":"code","metadata":{"id":"LizWCnTTShB2","colab_type":"code","colab":{}},"source":["Path_to_CSV = '/content/gdrive/My Drive/Emotion Caps/fer2013.csv'"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"SYbhDP2cLmta","colab_type":"code","colab":{}},"source":["dataset_path = Path_to_CSV \n","#Image size in this dataset is 48*48\n","image_size=(48,48)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"PNOGRVHbMelE","colab_type":"code","colab":{}},"source":["def load_fer2013():\n","\n","  data = pd.read_csv(dataset_path)\n","  pixels = data['pixels'].tolist()\n","  width, height = 48, 48\n","  faces = []\n","  for pixel_sequence in pixels:\n","      face = [int(pixel) for pixel in pixel_sequence.split(' ')]\n","      face = np.asarray(face).reshape(width, height)\n","      face = cv2.resize(face.astype('uint8'),image_size)\n","      faces.append(face.astype('float32'))\n","  faces = np.asarray(faces)\n","  faces = np.expand_dims(faces, -1)\n","  emotions = np.array(pd.get_dummies(data['emotion']))\n","  return faces, emotions\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1T40HWLdNCp7","colab_type":"code","outputId":"3a0ce454-cd9a-49e7-ec01-54e62c033c34","executionInfo":{"status":"ok","timestamp":1589627992194,"user_tz":-330,"elapsed":41587,"user":{"displayName":"krutarth bhatt","photoUrl":"","userId":"08759044503966658955"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["\n","faces, emotions = load_fer2013()\n","faces = faces.reshape(-1, 1, 48, 48)\n","z = list(zip(faces, emotions))\n","random.shuffle(z)\n","faces[:], emotions[:] = zip(*z)\n","\n","faces = faces[:35800, :, :, :]\n","emotions = emotions[:35800, :]\n","\n","print(faces.shape)\n","print(emotions.shape)\n","\n"],"execution_count":7,"outputs":[{"output_type":"stream","text":["(35800, 1, 48, 48)\n","(35800, 7)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XhEqKwXFWIlj","colab_type":"code","outputId":"9f567f21-3a03-4111-b9cb-d828c513f9ed","executionInfo":{"status":"ok","timestamp":1589627992198,"user_tz":-330,"elapsed":41347,"user":{"displayName":"krutarth bhatt","photoUrl":"","userId":"08759044503966658955"}},"colab":{"base_uri":"https://localhost:8080/","height":284}},"source":["plt.imshow(faces[9000].reshape(48,48))"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f32d52a8710>"]},"metadata":{"tags":[]},"execution_count":8},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"EFk9HrJL3M3f","colab_type":"code","outputId":"5f4af9af-98dc-4bf6-9dbe-c19b964b9b0b","executionInfo":{"status":"ok","timestamp":1589627993882,"user_tz":-330,"elapsed":1662,"user":{"displayName":"krutarth bhatt","photoUrl":"","userId":"08759044503966658955"}},"colab":{"base_uri":"https://localhost:8080/","height":354}},"source":["y = np.argmax(emotions, axis=1)\n","print(y.shape)\n","import seaborn as sns\n","import collections\n","g = sns.countplot(y)\n","\n","collections.Counter(y)"],"execution_count":9,"outputs":[{"output_type":"stream","text":["(35800,)\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["Counter({0: 4829, 1: 481, 2: 5134, 3: 9002, 4: 6060, 5: 4230, 6: 6064})"]},"metadata":{"tags":[]},"execution_count":9},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"w5dM1XnESYlI","colab_type":"text"},"source":["#Data division (For Training and Testing)"]},{"cell_type":"code","metadata":{"id":"sBH2VjDaSpT5","colab_type":"code","colab":{}},"source":["X_train = faces[7162:,:, :,:]\n","X_test  = faces[:7162, :,:,:]\n","y_train = emotions[7162:, :]\n","y_test  = emotions[:7162, :]\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"FPsY3eAYUQ10","colab_type":"code","colab":{}},"source":["\n","X_train = torch.tensor(X_train, dtype=torch.float) / 255.0\n","X_test = torch.tensor(X_test, dtype=torch.float) / 255.0\n","y_train = torch.tensor(y_train, dtype = torch.float)\n","y_test = torch.tensor(y_test, dtype = torch.float)\n","\n","y_test = y_test.type(torch.cuda.FloatTensor)\n","y_train = y_train.type(torch.cuda.FloatTensor)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eF1LEqWWWQKF","colab_type":"code","colab":{}},"source":["bs = 50\n","epochs = 5"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3S2K2Yb4UbGT","colab_type":"code","colab":{}},"source":["train_dataset = TensorDataset(X_train, y_train)\n","test_dataset = TensorDataset(X_test, y_test)\n","\n","train_loader  = DataLoader(train_dataset, batch_size=bs, shuffle=True)\n","test_loader = DataLoader(test_dataset, batch_size=bs, shuffle=True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eu8YvjXZUiBh","colab_type":"code","outputId":"fda9859d-8143-47d1-ddd5-862576b99da9","executionInfo":{"status":"ok","timestamp":1589628020257,"user_tz":-330,"elapsed":4442,"user":{"displayName":"krutarth bhatt","photoUrl":"","userId":"08759044503966658955"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print(len(train_loader))"],"execution_count":14,"outputs":[{"output_type":"stream","text":["573\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"85mTPL98dP_y","colab_type":"text"},"source":["#Model:"]},{"cell_type":"code","metadata":{"id":"ZVJqN_8ZKLla","colab_type":"code","colab":{}},"source":["class capsNet(nn.Module):\n","  \n","  \n","  def __init__(self):\n","    super(capsNet, self).__init__()\n","    \n","    self.BN0 = nn.BatchNorm2d(1)\n","    \n","    self.conv1 = nn.Conv2d(1, 64, 7)\n","    self.BN1 = nn.BatchNorm2d(64)\n","    \n","    self.conv2 = nn.Conv2d(64, 128, 11)\n","    self.BN2 = nn.BatchNorm2d(128)\n","    \n","    self.conv3 = nn.Conv2d(128, 256, 15, 2)\n","    self.BN3 = nn.BatchNorm2d(256)\n","    \n","    \n","    self.trans_matrix2 = nn.Parameter(torch.randn(1, 648, 7, 64, 32))\n","    \n","    # Decoder Network::\n","    self.decoder = nn.Sequential(\n","        \n","            nn.BatchNorm1d(64*7),\n","        \n","            nn.Linear(64*7, 512),\n","            # nn.BatchNorm1d(512),\n","            nn.ReLU(inplace = True),\n","            nn.BatchNorm1d(512),\n","           \n","            nn.Linear(512, 1024),\n","            # nn.BatchNorm1d(1024),\n","            nn.ReLU(inplace = True),\n","            nn.BatchNorm1d(1024),\n","        \n","            nn.Linear(1024, 2048),\n","            # nn.BatchNorm1d(2048),\n","            nn.ReLU(inplace = True),\n","            nn.BatchNorm1d(2048),\n","        \n","            nn.Linear(2048, 48*48),\n","            # nn.BatchNorm1d(48*48),\n","            nn.Sigmoid()\n","            \n","    )\n","    \n","    self.MSE = nn.MSELoss()\n","  \n","  \n","  \n","  \n","  def forward(self, x, T, train = True, Purturb = False, Purturb_vec = None):\n","    \n","        batch_size = x.size(0)\n","    \n","        T = T.type(torch.cuda.FloatTensor)\n","      \n","        x = self.BN0(x)\n","      \n","        x = self.conv1(x)\n","        # x = self.BN1(x)\n","        x = F.relu(x)\n","        x = self.BN1(x)\n","        \n","        \n","        \n","        x = self.conv2(x)\n","        # x = self.BN2(x)\n","        x = F.relu(x)\n","        x = self.BN2(x)\n","        \n","        \n","        x = self.conv3(x)\n","        # x = self.BN3(x)\n","        x = F.relu(x)\n","        x = self.BN3(x)\n","        \n","        \n","        x = x.view(-1, 648, 1, 32, 1)\n","        x = self.squash(x, dim = -2)\n","        \n","        W = torch.cat([self.trans_matrix2] * batch_size, dim=0)\n","        \n","        x = x.repeat(1,1,7,1,1)\n","        x = torch.matmul(W, x)\n","        \n","      \n","        rout_weight = torch.zeros(batch_size, 648, 7 ,1 ,1, requires_grad = False)\n","        \n","        \n","        routing_weights1 = F.softmax(rout_weight, dim = 1)\n","        weighted_predictions = routing_weights1.type(torch.cuda.FloatTensor) * x.type(torch.cuda.FloatTensor)                   #\n","        weighted_sum = torch.sum(weighted_predictions, dim=1, keepdim = True)\n","        r1_out = self.squash(weighted_sum, dim = -2)\n","\n","        r1_out_tiled = r1_out.repeat(1,648,1,1,1)\n","        r1_out_tiled = r1_out_tiled.transpose(-1,-2)\n","        agreement1 = torch.matmul(r1_out_tiled, x)\n","        rout_weight = rout_weight.type(torch.cuda.FloatTensor) + agreement1.type(torch.cuda.FloatTensor)                        #\n","\n","        routing_weights2 = F.softmax(rout_weight, dim = 1)\n","        weighted_predictions2 = routing_weights2.type(torch.cuda.FloatTensor) * x.type(torch.cuda.FloatTensor)                  #\n","        weighted_sum2 = torch.sum(weighted_predictions2, dim=1, keepdim = True)\n","        r_out = self.squash(weighted_sum2, dim = -2) \n","\n","        \n","\n","        y_proba = self.safe_norm(r_out, dim=-2)\n","        y_proba_argmax = torch.argmax(y_proba, dim=2)\n","        y_pred = torch.squeeze(y_proba_argmax)\n","        \n","        if train:\n","          \n","          y = T.view(-1,1,7,1,1)\n","          y = y.type(torch.cuda.FloatTensor)                                                                                    #\n","          mask = r_out * y                                                                        \n","          reconstructions = self.decoder(mask.view(-1, 64*7))\n","\n","        elif Purturb:\n","\n","          y_1_hot = F.one_hot(y_pred, num_classes = 7)  \n","          y_1_hot = y_1_hot.view(-1,1,7,1,1)\n","          y_1_hot = y_1_hot.type(torch.cuda.FloatTensor)\n","          r_out[:,:,y_pred,:,:] = r_out[:,:,y_pred,:,:] * Purturb_vec\n","          mask = r_out * y_1_hot                                                                                                #\n","          reconstructions = self.decoder(mask.view(-1, 64*7))\n","\n","          \n","        else:\n","          \n","          y_1_hot = F.one_hot(y_pred, num_classes = 7)  \n","          y_1_hot = y_1_hot.view(-1,1,7,1,1)\n","          y_1_hot = y_1_hot.type(torch.cuda.FloatTensor)\n","          mask = r_out * y_1_hot                                                                                                #\n","          reconstructions = self.decoder(mask.view(-1, 64*7))\n","        \n","        return y_pred, r_out, reconstructions \n","      \n","    \n","  \n","  def Total_loss(self, r_out, T, x, reconstructions):\n","    \n","    m_plus = 0.9\n","    m_minus = 0.1\n","    lambda_ = 0.5\n","    \n","    r1_out_normed = self.safe_norm(r2_out, dim = -2)\n","    r1_out_normed = r1_out_normed.view(-1, 7)\n","    T = T.type(torch.cuda.FloatTensor)                                                                                          #\n","    \n","    left = F.relu(m_plus - r1_out_normed, inplace=True) ** 2\n","    right = F.relu(r1_out_normed - m_minus, inplace=True) ** 2\n","\n","    margin_loss = T * left + lambda_ * (1. - T) * right\n","    margin_loss = torch.mean(torch.sum(margin_loss, dim=1))\n","    \n","    \n","    reconst = self.MSE(reconstructions, x.view(-1, 48*48))\n","    \n","    \n","    return (margin_loss + (0.0005 * reconst))\n","  \n","  \n","  \n","  \n","  def squash(self, tensor, dim=-1):\n","\n","    squared_norm = (tensor ** 2).sum(dim=dim, keepdim=True)\n","    scale = squared_norm / (1 + squared_norm)\n","    return scale * tensor / torch.sqrt(squared_norm + 1e-7)\n","\n","  def safe_norm(self, tensor, dim=-1, keepdim = False):\n","\n","    squared_norm = (tensor ** 2).sum(dim=dim, keepdim=True)\n","    return torch.sqrt(squared_norm + 1e-7)\n","  \n","    \n","    \n","    \n","  "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gWfCz29DUQeF","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":434},"outputId":"d978ee8c-ffcd-4b55-96eb-752eca40815c","executionInfo":{"status":"ok","timestamp":1589628049721,"user_tz":-330,"elapsed":1068,"user":{"displayName":"krutarth bhatt","photoUrl":"","userId":"08759044503966658955"}}},"source":["\n","net = capsNet()\n","net.to(device)\n"],"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["capsNet(\n","  (BN0): BatchNorm2d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  (conv1): Conv2d(1, 64, kernel_size=(7, 7), stride=(1, 1))\n","  (BN1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  (conv2): Conv2d(64, 128, kernel_size=(11, 11), stride=(1, 1))\n","  (BN2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  (conv3): Conv2d(128, 256, kernel_size=(15, 15), stride=(2, 2))\n","  (BN3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  (decoder): Sequential(\n","    (0): BatchNorm1d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (1): Linear(in_features=448, out_features=512, bias=True)\n","    (2): ReLU(inplace=True)\n","    (3): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (4): Linear(in_features=512, out_features=1024, bias=True)\n","    (5): ReLU(inplace=True)\n","    (6): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (7): Linear(in_features=1024, out_features=2048, bias=True)\n","    (8): ReLU(inplace=True)\n","    (9): BatchNorm1d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (10): Linear(in_features=2048, out_features=2304, bias=True)\n","    (11): Sigmoid()\n","  )\n","  (MSE): MSELoss()\n",")"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"AOG4MgyVUXFs","colab_type":"code","colab":{}},"source":["optimizer = torch.optim.Adam(net.parameters(), lr = 0.0007)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"j32UzVhJrV1d","colab_type":"text"},"source":["#Training Loop:"]},{"cell_type":"code","metadata":{"id":"5__msvAIUaVC","colab_type":"code","outputId":"2917efe5-7e33-436e-8a2c-cbcec38887f7","executionInfo":{"status":"ok","timestamp":1589628439615,"user_tz":-330,"elapsed":382362,"user":{"displayName":"krutarth bhatt","photoUrl":"","userId":"08759044503966658955"}},"colab":{"base_uri":"https://localhost:8080/","height":312}},"source":["print('Training....\\n')\n","last_acc = -1\n","\n","accuracy = []\n","iteration = []\n","k = -1\n","\n","loss = []\n","iteration2 = []\n","k2 = -1\n","\n","for i in range(epochs):\n","  k = k+1  \n","  net.train()\n","  \n","  for batch_id, (data, target) in enumerate(train_loader):\n","    \n","    optimizer.zero_grad()\n","     \n","    input_Tensor = data.to(device)\n","    target = target.to(device)\n","    \n","    _, r2_out,reconstructions  = net.forward(input_Tensor, target)\n","    # print(r2_out.shape)\n","    r2_out = r2_out.type(torch.cuda.FloatTensor)                                #\n","    l = net.Total_loss(r2_out, target, input_Tensor, reconstructions)\n","    \n","    loss.append(l.item())\n","    k2 = k2 +1\n","    iteration2.append(k2)\n","    \n","    print(\"\\repoch: {} iteration: {}  Loss: {:.5f}\".format( i+1, batch_id+1, l),end=\"\")\n","    \n","    l.backward(retain_graph = True)\n","      \n","    optimizer.step()\n","    \n","    \n","    \n","      \n","    \n","    \n","  net.eval()  \n","  avgacc = 0  \n","    \n","  for j, (data,target) in enumerate(test_loader):\n","    \n","    target1 = torch.argmax(target, dim=-1)\n","    inp = data.to(device)\n","    target = target.to(device)\n","    \n","\n","    y_pred, _, __  = net.forward(inp, target, False)\n","\n","\n","    corr = torch.eq(target1, y_pred).type(torch.cuda.FloatTensor)\n","\n","    acc = torch.mean(corr)*100\n","\n","    print('\\rVal Accuray per batch : {}'.format(acc), end=\"\")\n","\n","    avgacc =  avgacc + acc.item()\n","    \n","    \n","    \n","  accuracy.append(avgacc/len(test_loader))\n","  iteration.append(k)  \n","    \n","  print('\\n|After Epoch: ' + str(i+1) + '| Average Validation Accuracy: '+str(avgacc/len(test_loader))+'\\n')    \n","  \n","  \"\"\"if(avgacc>last_acc):\n","    last_acc = avgacc\n","    torch.save({\n","            'epoch': i,\n","            'model_state_dict': net.state_dict(),\n","            'optimizer_state_dict': optimizer.state_dict(),\n","            'loss': l\n","            }, \"/content/gdrive/My Drive/ML_models/model3_facecaps.tar\")  \"\"\""],"execution_count":19,"outputs":[{"output_type":"stream","text":["Training....\n","\n","Val Accuray per batch : 41.66666793823242\n","|After Epoch: 1| Average Validation Accuracy: 52.51157286432054\n","\n","Val Accuray per batch : 83.33333587646484\n","|After Epoch: 2| Average Validation Accuracy: 71.80092528131273\n","\n","Val Accuray per batch : 83.33333587646484\n","|After Epoch: 3| Average Validation Accuracy: 88.8842567867703\n","\n","Val Accuray per batch : 83.33333587646484\n","|After Epoch: 4| Average Validation Accuracy: 93.84259027904935\n","\n","Val Accuray per batch : 100.0\n","|After Epoch: 5| Average Validation Accuracy: 94.44444121254816\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"1m7HmkHRSjF_","colab_type":"code","colab":{}},"source":["pred = []\n","ground_truth = []\n","net.eval() \n","for j, (data,target) in enumerate(test_loader):\n","    \n","    target1 = torch.argmax(target, dim=-1)\n","    inp = data.to(device)\n","    target = target.to(device)\n","    \n","\n","    y_pred, _, __  = net.forward(inp, target, False)\n","\n","    pred.append(torch.Tensor.cpu(y_pred).detach().numpy())\n","    ground_truth.append(torch.Tensor.cpu(target1).detach().numpy())\n","\n","\n","    # corr = torch.eq(target1, y_pred).type(torch.cuda.FloatTensor)\n","\n","    # acc = torch.mean(corr)*100\n","\n","    # print('\\rVal Accuray per batch : {}'.format(acc), end=\"\")\n","\n","    # avgacc =  avgacc + acc.item()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"W_6egiQoTi_j","colab_type":"code","colab":{}},"source":["pred = np.array(pred)\n","pred = np.concatenate(pred , axis=0)\n","ground_truth = np.array(ground_truth)\n","ground_truth = np.concatenate(ground_truth , axis=0)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7wXW8dVTXVgt","colab_type":"text"},"source":["#Classification Report"]},{"cell_type":"code","metadata":{"id":"nJf94IVuUPzN","colab_type":"code","outputId":"7c0f87a8-02da-42d4-e879-ade225aa09b7","executionInfo":{"status":"ok","timestamp":1589628722309,"user_tz":-330,"elapsed":1222,"user":{"displayName":"krutarth bhatt","photoUrl":"","userId":"08759044503966658955"}},"colab":{"base_uri":"https://localhost:8080/","height":260}},"source":["import sklearn\n","from sklearn.metrics import classification_report\n","print(classification_report(ground_truth, pred, labels=[0,1,2,3,4,5,6], target_names=[\"Angry\", \"Disgust\", \"Fear\", \"Happy\", \"Sad\", \"Surprise\", \"Neutral\"]))"],"execution_count":22,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","       Angry       0.93      0.93      0.93       993\n","     Disgust       0.92      0.94      0.93        85\n","        Fear       0.94      0.92      0.93      1077\n","       Happy       0.96      0.98      0.97      1793\n","         Sad       0.93      0.94      0.94      1217\n","    Surprise       0.97      0.96      0.96       829\n","     Neutral       0.93      0.93      0.93      1168\n","\n","    accuracy                           0.94      7162\n","   macro avg       0.94      0.94      0.94      7162\n","weighted avg       0.94      0.94      0.94      7162\n","\n"],"name":"stdout"}]}]}